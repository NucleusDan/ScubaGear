on: 
  workflow_dispatch:
    inputs:
      releaseName:
        description: "Release Name"
        required: true
        type: string
      version:
        description: "Release Version"
        required: true
        type: string

name: Build and Sign Release


jobs:
  build-and-deploy:
    runs-on: windows-latest
    env:
      CODESIGN_PW: ${{ secrets.CODESIGN_PW }}
      CODESIGN_PFX: ${{ secrets.CODESIGN_PFX }}
      CODESIGN_INT: ${{ secrets.CODESIGN_INT }}
    permissions:
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        path: repo
    - name: Sign Scripts
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        $PSDefaultParameterValues['*:ErrorAction']='Stop'
        Set-StrictMode -Version Latest

        New-Item -ItemType directory -Path certificate
        Set-Content -Path certificate\cert.txt -Value $env:CODESIGN_PFX
        certutil -decode certificate\cert.txt certificate\cert.pfx

        Set-Content -Path certificate\int.txt -Value $env:CODESIGN_INT
        certutil -decode certificate\int.txt certificate\int.cer

        # Load CA and Key
        $cert = Get-PfxCertificate -FilePath certificate\cert.pfx -Password (ConvertTo-SecureString -String $env:CODESIGN_PW -Force -AsPlainText)

        # Import Intermediate so it can be resolved
        Import-Certificate -FilePath certificate\int.cer

        Get-ChildItem -Recurse -Path repo -Include **.ps1,**.psm1 | ForEach-Object {
          $path = $_.FullName
          Set-AuthenticodeSignature -Certificate $cert -FilePath $path -TimestampServer "http://timestamp.sectigo.com/" -IncludeChain NotRoot
        }

        Remove-Item -Recurse -Force certificate
        Remove-Item -Recurse -Force repo -Include .git*

        Compress-Archive -Path repo\* -DestinationPath release.zip
    - name: release
      uses: softprops/action-gh-release@v1
      id: create_release
      with:
        draft: true
        prerelease: false
        name: ${{ inputs.releaseName }}
        tag_name: ${{ inputs.version }}
        files: release.zip
        generate_release_notes: true
        fail_on_unmatched_files: true
