on: 
  workflow_dispatch:
  pull_request:
    types: [opened, reopened]
    branches:
      - "main"
  pull_request_review:
      types: [submitted]  
  push:
    branches:
      - "automated-smoke-test"

name: Smoke Test

jobs:
  Run-Smoke-Test:
    runs-on: windows-latest
    env:
      SCUBA_EXECUTION_CERT_PFX: ${{ secrets.SCUBA_EXECUTION_CERT_PFX }}
      SCUBA_EXECUTION_CERT_PW: ${{ secrets.SCUBA_EXECUTION_CERT_PW }}
      SCUBA_GITHUB_AUTOMATION_CREDS: ${{ secrets.SCUBA_GITHUB_AUTOMATION_CREDS }}
    defaults:
          run:
            shell: powershell 
    permissions:
      contents: read 
    steps:
    - name: Checkout repo code
      uses: actions/checkout@v3
    - name: Execute ScubaGear and Check Outputs
      run: |
        . Testing/Functional/SmokeTest/SmokeTestInit.ps1
        ./AllowBasicAuthentication.ps1 -RunAsAdmin

        ##### Install all the dependencies
        Install-SmokeTestExternalDependencies

        $AUTOMATION_CREDS = $env:SCUBA_GITHUB_AUTOMATION_CREDS | ConvertFrom-Json
        $TestTenants = $AUTOMATION_CREDS.TestTenants
        Write-Output "Identified $($TestTenants.Count) Test Tenants"
        $TestContainers = @()

        $TestTenantsHash = @{}
        ForEach ($TestTenantObject in $TestTenants){       
          $TestTenantObject.PsObject.Properties | ForEach { $TestTenantsHash[$_.Name] = $_.Value }
        }

        ForEach ($TestTenant in $TestTenantsHashGetEnumerator()){
          
          Write-Output "Processing test tenant: $TestTenant.Name"
          $CertPwd = ConvertTo-SecureString -String $TestTenant.Value.CertificatePassword -Force -AsPlainText
          $Result = New-ServicePrincipalCertificate -EncodedCertificate $TestTenant.Value.CertificateB64 -CertificatePassword $CertPwd
          $Thumbprint = $Result[-1]
          $OrgName = $TestTenant.Value.DisplayName
          $DomainName = $TestTenant.Value.DomainName
          $AppId = $TestTenant.Value.AppId

          $TestContainers += New-PesterContainer -Path "Testing/Functional/SmokeTest/SmokeTest001.Tests.ps1" -Data @{ Thumbprint = $Thumbprint; Organization = $DomainName; AppId = $AppId }
          $TestContainers += New-PesterContainer -Path "Testing/Functional/SmokeTest/SmokeTest002.Tests.ps1" -Data @{ OrganizationDomain = $DomainName; OrganizationName = $OrgName }
        }
        Invoke-Pester -Container $TestContainers -Output Detailed

        Write-Output "Completed Smoke Test"